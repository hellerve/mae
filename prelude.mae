(def true {{} {}})
(def false {})

(def if
  {(c a b) -> (({true a false b} c))})

(def neg
  {(a) -> (if a {() -> false} {() -> true})})

(def empty?
  {(m) -> (= {} m)})

(def size
  {(m) ->
    (if (empty? m)
      {() -> 0}
      {() -> (inc (size (next m)))})})

(def foldr
  {(f e m) ->
     (if (empty? m)
       {() -> e}
       {() ->
         (if (= (size m) 1)
           {() -> (f (this m) (next m) m)}
           {() -> (f (this (this m)) (next (this m)) (foldr f e (next m)))})})})

(def map
  {(f m) -> (foldr {(k v m) -> (add m (f k v))} {} m)})

(def filter
  {(f m) ->
    (foldr {(k v m) -> (if (f k v) {() -> (add m {k v})} {() -> m})} {} m)})

(def inc
  {(m) -> (add m {m {}})})

(def dec
  {(m) ->
     (if (empty? (next m))
       {() -> (this m)}
       {() -> (dec (next m))})})
