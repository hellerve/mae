(def true {{} {}})
(def false {})
(def empty {})

(def empty?
  {(m) -> (= empty m)})

(def neg {true false false true})

(def truthy? {(m) -> (neg (empty? m))})

(def if
  {(cond then else) -> (({true then false else} cond))})

(def inc
  {(n) -> (add n {n {}})})

(def dec
  {(n) -> (filter {(k v) -> (neg (= (rem n k) k))} n)})

(def +
  {(m n) -> (foldr {(k v acc) -> (inc acc)} m n)})

(def -
  {(m n) -> (foldr {(k v acc) -> (dec acc)} m n)})

(def size
  {(m) ->
    (if (empty? m)
      {() -> 0}
      {() -> (inc (size (next m)))})})

(def foldr
  {(f e m) ->
     (if (empty? m)
       {() -> e}
       {() ->
         (if (= (size m) 1)
           {() -> (f (this m) (next m) e)}
           {() -> (f (this (this m)) (next (this m)) (foldr f e (next m)))})})})

(def map
  {(f m) -> (foldr {(k v m) -> (add m (f k v))} {} m)})

(def filter
  {(f m) ->
    (foldr {(k v m) -> (if (f k v) {() -> (add m {k v})} {() -> m})} {} m)})
